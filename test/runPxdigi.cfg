process ProcessPixelDigitizer = {

	source = PoolSource { 
        # untracked vstring fileNames = {'file:simevent_1k.root'}
        untracked vstring fileNames = {'file:/tmp/danek/Muon_Full_150pre2.root'}


         untracked int32 maxEvents      = 1000
       #   untracked int32 maxEvents      = -1
          untracked uint32 debugVebosity = 100
          untracked bool   debugFlag     = true
	}

  # Initialize magnetic field
  include "MagneticField/Engine/data/volumeBasedMagneticField.cfi"

  # Fill CMS Geometry
  # include "Geometry/CMSCommonData/data/cmsSimIdealGeometryXML.cfi"
  # Tracker SimGeometryXML
  include "Geometry/TrackerSimData/data/trackerSimGeometryXML.cfi"

 
  # Tracker Geometry Builder
  include "Geometry/TrackerGeometryBuilder/data/trackerGeometry.cfi"

  # Tracker Numbering Builder
  include "Geometry/TrackerNumberingBuilder/data/trackerNumberingGeometry.cfi"

  # PixelDigitizer
  include "SimTracker/SiPixelDigitizer/data/PixelDigi.cfi"
  # replace siPixelDigis.MissCalibrate = false

   module mix = MixingModule
   {
#      secsource input = PoolRASource
#      {
         #
         # starting 050, you can skip secsource block at all if you don't
         # wnat to model mixing/pileup at all;
         # however, an at least "empty mixing" need to be present if you
         # want to perform Ecal/Hcal/CSC/DT digitization - those explicitely
         # require presence of CrossingFrame in the edm::Event
         #
         # alternatively, you can set averageNumber=0 if you don't want
         # to model the pileup
         #
         # to the secsource/PoolRASource, you can give just 1 file or more;
         # this files will make a "concatinated buffer", which will go circular
         # until the loop of primary events is done - thus, it'll never run out
         #
         # WARNING: you can only give miltiple files, if they're generated with
         #          identical sets of tracked parameters;
         #          for example, you canNOT give a file made with a single muon
         #          gun and a file made with a single pion gun, because PartID
         #          is a *tracked* parameter in the gun's PSet;
         #          however, you can merge together files made with other generators,
         #          for example, PythiaSource, because all parameters of it would be
         #          *untracked*
         #
#         untracked vstring fileNames =
#         {'file:/afs/cern.ch/cms/geant4rep/genntpl/muon_simhit_for_pileup.060pre1.root' }
#         string type = "poisson"
#         double averageNumber = 3  # setting this param. to 0 means "No pile-up",
#                                   # that is, digitize current crossing only
#         int32 minBunch = -3
#         int32 maxBunch = 5
#         int32 seed = 1234567
#      }
      int32 bunchspace = 25
   }

    service = RandomNumberGeneratorService {
	untracked uint32 sourceSeed = 135799753
	PSet moduleSeeds =
	{
	    untracked uint32 VtxSmeared = 123456789
	    untracked uint32 g4SimHits = 194098651
	    untracked uint32 mix = 9823
	    untracked uint32 siPixelDigis = 923
	}
    }

  service = MessageLogger {  
	untracked vstring destinations   = { "debugmessages.txt" }
        untracked PSet debugmessages.txt = { untracked string threshold = "INFO"}
        untracked vstring debugModules={"pixdigi"}
  }


# analysis module if one wants to check the digis
#        module analysis =  PixelDigisTest {
#           untracked bool Verbosity = false
#           InputTag src = siPixelDigis
#        }
 


  module out = PoolOutputModule {
        untracked string fileName = 'pixdigi.root'
  }

  # when new simhits are digitized
  path p = {mix,siPixelDigis}
  # when I redigitze simhits from a root file which has digis already 
  # path p = {siPixelDigis, analysis}
  endpath outpath = { out }
}
